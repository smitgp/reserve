name: Smart Library Reservation

on:
  # Manual trigger - enter target date and it schedules optimally
  workflow_dispatch:
    inputs:
      target_date:
        description: 'Target booking date (YYYY-MM-DD) - will schedule 2 days before at 18:01'
        required: true
        type: string
      email:
        description: 'Email address to use for booking (leave empty to use default from secrets)'
        required: false
        type: string
      start_time:
        description: 'Start time (HH:MM) - use 09:00 format'
        required: false
        default: '09:00'
        type: string
      end_time:
        description: 'End time (HH:MM)'
        required: false
        default: '17:00'
        type: string
      resource:
        description: 'Resource ID'
        required: false
        default: '565'
        type: string

jobs:
  reserve:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Set email parameter
      id: email
      run: |
        if [ -n "${{ github.event.inputs.email }}" ]; then
          EMAIL="${{ github.event.inputs.email }}"
          BASE_EMAIL="${{ github.event.inputs.email }}"
        else
          EMAIL="${{ secrets.EMAIL }}"
          BASE_EMAIL="${{ secrets.BASE_EMAIL }}"
        fi
        echo "email=$EMAIL" >> $GITHUB_OUTPUT
        echo "base_email=$BASE_EMAIL" >> $GITHUB_OUTPUT
        echo "üìß Using email: $EMAIL"
        
    - name: Create .env file
      env:
        EMAIL: ${{ steps.email.outputs.email }}
        LOCATION: ${{ secrets.LOCATION }}
        TYPE: ${{ secrets.TYPE }}
        BASE_EMAIL: ${{ steps.email.outputs.base_email }}
        ENGINE_BODY: ${{ secrets.ENGINE_BODY }}
      run: |
        cat > .env << EOF
        EMAIL=${{ steps.email.outputs.email }}
        LOCATION=${{ secrets.LOCATION }}
        TYPE=${{ secrets.TYPE }}
        BASE_EMAIL=${{ steps.email.outputs.base_email }}
        ENGINE_BODY=${{ secrets.ENGINE_BODY }}
        EOF
        
    - name: Calculate optimal booking time
      id: schedule
      run: |
        TARGET_DATE="${{ github.event.inputs.target_date }}"
        echo "üéØ Target booking date: $TARGET_DATE"
        
        # Calculate when booking window opens (2 days before at 18:01 Netherlands time)
        BOOKING_WINDOW_DATE=$(date -d "$TARGET_DATE -2 days" '+%Y-%m-%d')
        BOOKING_WINDOW_TIME="17:01"  # 17:01 UTC = 18:01 Netherlands
        
        echo "üìÖ Booking window opens: $BOOKING_WINDOW_DATE at $BOOKING_WINDOW_TIME UTC (18:01 Netherlands)"
        
        # Calculate current time and optimal booking time
        CURRENT_TIMESTAMP=$(date '+%s')
        OPTIMAL_TIMESTAMP=$(date -d "$BOOKING_WINDOW_DATE $BOOKING_WINDOW_TIME" '+%s')
        
        echo "‚è∞ Current time: $(date)"
        echo "üéØ Optimal booking time: $BOOKING_WINDOW_DATE $BOOKING_WINDOW_TIME UTC"
        
        # Calculate how long to wait (in seconds)
        WAIT_SECONDS=$((OPTIMAL_TIMESTAMP - CURRENT_TIMESTAMP))
        
        if [ $WAIT_SECONDS -gt 0 ]; then
          echo "‚è≥ Need to wait $WAIT_SECONDS seconds ($(($WAIT_SECONDS / 3600)) hours, $(($WAIT_SECONDS % 3600 / 60)) minutes)"
          echo "üïê Will book at exactly the right moment!"
        elif [ $WAIT_SECONDS -gt -3600 ]; then
          echo "‚ö° Booking window just opened! Perfect timing!"
        else
          echo "‚ö†Ô∏è  Booking window opened more than 1 hour ago - might be too late, but trying anyway"
        fi
        
        echo "target_date=$TARGET_DATE" >> $GITHUB_OUTPUT
        echo "wait_seconds=$WAIT_SECONDS" >> $GITHUB_OUTPUT
        echo "optimal_time=$BOOKING_WINDOW_DATE $BOOKING_WINDOW_TIME UTC" >> $GITHUB_OUTPUT
        
    - name: Set booking parameters
      id: params
      run: |
        START_TIME="${{ github.event.inputs.start_time || '10:00' }}"
        END_TIME="${{ github.event.inputs.end_time || '17:00' }}"
        RESOURCE="${{ github.event.inputs.resource || '565' }}"
        
        echo "start_time=$START_TIME" >> $GITHUB_OUTPUT
        echo "end_time=$END_TIME" >> $GITHUB_OUTPUT
        echo "resource=$RESOURCE" >> $GITHUB_OUTPUT
        
        echo "üìã Booking parameters:"
        echo "  Start: $START_TIME"
        echo "  End: $END_TIME" 
        echo "  Resource: $RESOURCE"
        
    - name: Wait for optimal booking time
      run: |
        WAIT_SECONDS="${{ steps.schedule.outputs.wait_seconds }}"
        
        if [ $WAIT_SECONDS -gt 0 ]; then
          if [ $WAIT_SECONDS -gt 21600 ]; then
            echo "‚ùå Wait time is more than 6 hours ($((WAIT_SECONDS / 3600)) hours)"
            echo "‚ùå GitHub Actions has a 6-hour job limit. Please schedule closer to the booking time."
            exit 1
          fi
          
          echo "‚è≥ Waiting $WAIT_SECONDS seconds for optimal booking time..."
          echo "üïê Booking window opens at: ${{ steps.schedule.outputs.optimal_time }}"
          echo "üì± You can close your laptop - this will wait automatically!"
          
          # Wait until the optimal time
          sleep $WAIT_SECONDS
          
          echo "üéØ Perfect timing! Booking window just opened!"
        else
          echo "‚ö° Booking window is already open - proceeding immediately!"
        fi
        
    - name: Make strategic reservation
      env:
        TARGET_DATE: ${{ steps.schedule.outputs.target_date }}
        START_TIME: ${{ steps.params.outputs.start_time }}
        END_TIME: ${{ steps.params.outputs.end_time }}
        RESOURCE: ${{ steps.params.outputs.resource }}
      run: |
        echo "üéØ Strategic booking at optimal time!"
        echo "üìÖ Booking $TARGET_DATE from $START_TIME to $END_TIME on Resource $RESOURCE"
        echo "‚è∞ Running exactly when booking window opened!"
        node reserve.mjs --date "$TARGET_DATE" --start "$START_TIME" --end "$END_TIME" --resource "$RESOURCE"
        
    - name: Upload logs (if any failures)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: strategic-reservation-logs-${{ steps.schedule.outputs.target_date }}
        path: |
          *.log
          debug_*.html
        retention-days: 7