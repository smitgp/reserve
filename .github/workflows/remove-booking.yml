name: 🗑️ Remove Booking(s)

on:
  workflow_dispatch:
    inputs:
      target_date:
        description: 'Date of booking to remove (YYYY-MM-DD). Leave empty to remove ALL bookings.'
        required: false
        type: string
        default: ''

permissions:
  contents: write

jobs:
  remove-bookings:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Validate inputs
      run: |
        TARGET_DATE="${{ github.event.inputs.target_date }}"
        
        if [ -z "$TARGET_DATE" ]; then
          echo "🗑️ REMOVE ALL BOOKINGS MODE"
          echo "⚠️ This will remove ALL bookings from the schedule"
        else
          echo "🎯 Target Date: $TARGET_DATE"
          
          # Validate date format
          if ! date -d "$TARGET_DATE" >/dev/null 2>&1; then
            echo "❌ Invalid date format. Use YYYY-MM-DD"
            exit 1
          fi
        fi
        
    - name: Remove booking(s) from YAML
      run: |
        # Create booking removal script
        cat > remove-bookings-from-yaml.mjs << 'EOF'
        import fs from 'fs/promises';
        import YAML from 'yaml';
        
        async function removeBookings() {
          const targetDate = process.env.TARGET_DATE;
          const removeAll = !targetDate || targetDate.trim() === '';
          
          try {
            // Load existing configuration
            const yamlContent = await fs.readFile('bookings.yml', 'utf8');
            const config = YAML.parse(yamlContent);
            
            if (!config.bookings || !Array.isArray(config.bookings)) {
              console.log(`📭 No bookings found in configuration`);
              return;
            }
            
            const initialCount = config.bookings.length;
            console.log(`📋 Found ${initialCount} existing booking(s)`);
            
            if (removeAll) {
              console.log(`🗑️ REMOVING ALL BOOKINGS`);
              
              // Show what will be removed
              if (config.bookings.length > 0) {
                console.log(`\n📋 Removing the following bookings:`);
                config.bookings.forEach((booking, index) => {
                  console.log(`   ${index + 1}. ${booking.targetDate} ${booking.start}-${booking.end} (Resource ${booking.resource})`);
                });
              }
              
              // Clear all bookings
              config.bookings = [];
              
              console.log(`\n✅ Removed all ${initialCount} booking(s)`);
              
            } else {
              console.log(`🎯 Removing booking for: ${targetDate}`);
              
              // Find and remove specific booking
              const bookingIndex = config.bookings.findIndex(b => b.targetDate === targetDate);
              if (bookingIndex === -1) {
                console.log(`❌ No booking found for ${targetDate}`);
                console.log('📋 Available bookings:');
                config.bookings.forEach((booking, index) => {
                  console.log(`   ${index + 1}. ${booking.targetDate} ${booking.start}-${booking.end} (Resource ${booking.resource})`);
                });
                process.exit(1);
              }
              
              const removedBooking = config.bookings[bookingIndex];
              console.log(`📝 Found booking: ${removedBooking.targetDate} ${removedBooking.start}-${removedBooking.end} (Resource ${removedBooking.resource})`);
              
              config.bookings.splice(bookingIndex, 1);
              console.log(`✅ Removed booking for ${targetDate}`);
            }
            
            // Save updated configuration
            let yamlContent;
            if (config.bookings.length === 0) {
              yamlContent = '# Library Booking Schedule\n';
              yamlContent += '# Simple YAML configuration for automatic library bookings\n';
              yamlContent += '#\n';
              yamlContent += '# Each booking will execute 2 days before the target date at 18:01 Netherlands time\n';
              yamlContent += '# Add bookings using the "Add New Booking" workflow\n';
              yamlContent += '\n';
              yamlContent += 'bookings: []\n';
            } else {
              const yamlData = YAML.stringify(config, {
                lineWidth: 0,
                minContentWidth: 0,
                quotingType: '"'
              });
              
              yamlContent = '# Library Booking Schedule\n';
              yamlContent += '# Simple YAML configuration for automatic library bookings\n';
              yamlContent += '#\n';
              yamlContent += '# Each booking will execute 2 days before the target date at 18:01 Netherlands time\n';
              yamlContent += '\n';
              yamlContent += yamlData;
            }
            
            await fs.writeFile('bookings.yml', yamlContent);
            console.log(`💾 Updated bookings.yml`);
            
            // Show final stats
            console.log(`\n📊 Final booking count: ${config.bookings.length}`);
            if (config.bookings.length > 0) {
              console.log(`📋 Remaining bookings:`);
              config.bookings.forEach((booking, index) => {
                console.log(`   ${index + 1}. ${booking.targetDate} ${booking.start}-${booking.end} (Resource ${booking.resource})`);
              });
            }
            
            // Set environment variable for commit message
            const fs_sync = await import('fs');
            if (removeAll) {
              fs_sync.appendFileSync(process.env.GITHUB_ENV, `COMMIT_MESSAGE=🗑️ Remove all bookings (${initialCount} removed)\n`);
            } else {
              fs_sync.appendFileSync(process.env.GITHUB_ENV, `COMMIT_MESSAGE=🗑️ Remove booking: ${targetDate}\n`);
            }
            fs_sync.appendFileSync(process.env.GITHUB_ENV, `CHANGES_MADE=true\n`);
            
          } catch (error) {
            console.error(`❌ Error: ${error.message}`);
            process.exit(1);
          }
        }
        
        removeBookings().catch(error => {
          console.error(`❌ Fatal error: ${error.message}`);
          process.exit(1);
        });
        EOF
        
        # Run the script
        TARGET_DATE="${{ github.event.inputs.target_date }}" node remove-bookings-from-yaml.mjs
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add bookings.yml
        
        if git diff --staged --quiet; then
          echo "📭 No changes to commit"
        else
          git commit -m "$COMMIT_MESSAGE

          📅 Date: ${{ github.event.inputs.target_date || 'ALL' }}
          🤖 Via: Remove Booking Workflow"
          
          git push
          echo "✅ Changes committed to repository"
        fi
        
    - name: Display final schedule
      run: |
        echo "🎉 Operation completed successfully!"
        echo ""
        echo "📋 Current bookings.yml:"
        cat bookings.yml
        echo ""
        echo "💡 To add new bookings, use the 'Add New Booking' workflow"