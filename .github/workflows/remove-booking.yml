name: 🗑️ Remove Booking

on:
  workflow_dispatch:
    inputs:
      target_date:
        description: 'Date of booking to remove (YYYY-MM-DD)'
        required: true
        type: string
        default: '2025-12-15'
      action_type:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'remove'
          - 'disable'
          - 'enable'
        default: 'remove'

jobs:
  manage-booking:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - name: Validate inputs
      run: |
        echo "🎯 Target Date: ${{ github.event.inputs.target_date }}"
        echo "🔧 Action: ${{ github.event.inputs.action_type }}"
        
        # Validate date format
        if ! date -d "${{ github.event.inputs.target_date }}" >/dev/null 2>&1; then
          echo "❌ Invalid date format. Use YYYY-MM-DD"
          exit 1
        fi
        
    - name: Perform booking action
      run: |
        # Create booking management script
        cat > manage-booking-workflow.mjs << 'EOF'
        import fs from 'fs/promises';
        
        async function manageBooking() {
          const targetDate = process.env.TARGET_DATE;
          const actionType = process.env.ACTION_TYPE;
          
          console.log(`🔧 ${actionType.toUpperCase()} booking for: ${targetDate}`);
          
          try {
            // Load existing configuration
            const configFile = await fs.readFile('booking-config.json', 'utf8');
            const config = JSON.parse(configFile);
            
            // Find the booking
            const bookingIndex = config.bookings.findIndex(b => b.targetDate === targetDate);
            if (bookingIndex === -1) {
              console.log(`❌ No booking found for ${targetDate}`);
              console.log('📋 Available bookings:');
              config.bookings.forEach(b => {
                console.log(`   • ${b.targetDate}: ${b.description} (${b.enabled ? 'enabled' : 'disabled'})`);
              });
              process.exit(1);
            }
            
            const booking = config.bookings[bookingIndex];
            console.log(`📝 Found booking: ${booking.description}`);
            console.log(`   ⏰ Time: ${booking.start} - ${booking.end}`);
            console.log(`   🏢 Resource: ${booking.resource}`);
            console.log(`   📅 Would execute: ${booking.bookingDate} at 18:01`);
            console.log(`   🔧 Current status: ${booking.enabled ? 'enabled' : 'disabled'}`);
            
            let changed = false;
            let commitMessage = '';
            
            if (actionType === 'remove') {
              config.bookings.splice(bookingIndex, 1);
              changed = true;
              commitMessage = `🗑️ Remove booking: ${targetDate}`;
              console.log(`✅ Booking for ${targetDate} has been removed`);
              
            } else if (actionType === 'disable') {
              if (booking.enabled) {
                booking.enabled = false;
                booking.disabledAt = new Date().toISOString();
                changed = true;
                commitMessage = `🔴 Disable booking: ${targetDate}`;
                console.log(`🔴 Booking for ${targetDate} has been disabled`);
              } else {
                console.log(`ℹ️ Booking for ${targetDate} was already disabled`);
              }
              
            } else if (actionType === 'enable') {
              if (!booking.enabled) {
                booking.enabled = true;
                delete booking.disabledAt;
                delete booking.completedAt; // Allow re-execution
                changed = true;
                commitMessage = `🟢 Enable booking: ${targetDate}`;
                console.log(`🟢 Booking for ${targetDate} has been enabled`);
              } else {
                console.log(`ℹ️ Booking for ${targetDate} was already enabled`);
              }
            }
            
            if (changed) {
              // Save configuration
              await fs.writeFile('booking-config.json', JSON.stringify(config, null, 2));
              console.log(`💾 Configuration updated`);
              
              // Set environment variable for commit
              const fs_sync = await import('fs');
              fs_sync.appendFileSync(process.env.GITHUB_ENV, `COMMIT_MESSAGE=${commitMessage}\n`);
              fs_sync.appendFileSync(process.env.GITHUB_ENV, `CHANGES_MADE=true\n`);
            } else {
              const fs_sync = await import('fs');
              fs_sync.appendFileSync(process.env.GITHUB_ENV, `CHANGES_MADE=false\n`);
            }
            
            // Show final stats
            const activeBookings = config.bookings.filter(b => b.enabled && !b.completedAt).length;
            console.log(`\n📊 Current booking status:`);
            console.log(`   🟢 Active bookings: ${activeBookings}`);
            console.log(`   📊 Total bookings: ${config.bookings.length}`);
            
          } catch (error) {
            console.error(`❌ Error: ${error.message}`);
            process.exit(1);
          }
        }
        
        manageBooking().catch(error => {
          console.error(`❌ Fatal error: ${error.message}`);
          process.exit(1);
        });
        EOF
        
        # Run the script
        TARGET_DATE="${{ github.event.inputs.target_date }}" \
        ACTION_TYPE="${{ github.event.inputs.action_type }}" \
        node manage-booking-workflow.mjs
        
    - name: Commit changes
      if: env.CHANGES_MADE == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add booking-config.json
        
        if git diff --staged --quiet; then
          echo "📭 No changes to commit"
        else
          git commit -m "$COMMIT_MESSAGE

          📅 Date: ${{ github.event.inputs.target_date }}
          🔧 Action: ${{ github.event.inputs.action_type }}
          🤖 Via: GitHub Workflow"
          
          git push
          echo "✅ Changes committed to repository"
        fi
        
    - name: Display final status
      run: |
        if [ "$CHANGES_MADE" = "true" ]; then
          echo "🎉 Operation completed successfully!"
          echo ""
          echo "📋 Summary:"
          echo "   📅 Date: ${{ github.event.inputs.target_date }}"
          echo "   🔧 Action: ${{ github.event.inputs.action_type }}"
          echo "   ✅ Status: Updated"
        else
          echo "ℹ️ No changes were needed"
        fi
        echo ""
        echo "📋 To view all current bookings, run the 'List Bookings' workflow"