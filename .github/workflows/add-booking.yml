name: 📝 Add New Booking

on:
  workflow_dispatch:
    inputs:
      target_date:
        description: 'Target booking date (YYYY-MM-DD)'
        required: true
        type: string
        default: '2025-12-15'
      start_time:
        description: 'Start time (HH:MM)'
        required: true
        type: string
        default: '09:00'
      end_time:
        description: 'End time (HH:MM)'
        required: true
        type: string
        default: '17:00'
      resource:
        description: 'Resource ID'
        required: false
        type: string
        default: '565'

permissions:
  contents: write

jobs:
  add-booking:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Validate inputs and calculate timing
      run: |
        echo "🎯 Adding booking for: ${{ github.event.inputs.target_date }}"
        echo "⏰ Time: ${{ github.event.inputs.start_time }} - ${{ github.event.inputs.end_time }}"
        echo "🏢 Resource: ${{ github.event.inputs.resource }}"
        
        # Validate date format
        if ! date -d "${{ github.event.inputs.target_date }}" >/dev/null 2>&1; then
          echo "❌ Invalid date format. Use YYYY-MM-DD"
          exit 1
        fi
        
        # Calculate booking date (2 days before)
        TARGET_DATE="${{ github.event.inputs.target_date }}"
        BOOKING_DATE=$(date -d "$TARGET_DATE - 2 days" +%Y-%m-%d)
        echo "📅 Will execute on: $BOOKING_DATE at 18:01 Netherlands time"
        echo "BOOKING_DATE=$BOOKING_DATE" >> $GITHUB_ENV
        
    - name: Add booking to YAML configuration
      run: |
        # Create booking addition script
        cat > add-booking-to-yaml.mjs << 'EOF'
        import fs from 'fs/promises';
        import YAML from 'yaml';
        
        async function addBooking() {
          const targetDate = process.env.TARGET_DATE;
          const startTime = process.env.START_TIME;
          const endTime = process.env.END_TIME;
          const resource = process.env.RESOURCE;
          
          console.log('📝 Adding booking: ' + targetDate + ' ' + startTime + '-' + endTime + ' (Resource ' + resource + ')');
          
          // Load existing configuration
          let config;
          try {
            const yamlContent = await fs.readFile('bookings.yml', 'utf8');
            config = YAML.parse(yamlContent);
          } catch (error) {
            console.log('📋 Creating new booking configuration');
            config = { bookings: [] };
          }
          
          if (!config.bookings) {
            config.bookings = [];
          }
          
          // Check for existing booking
          const existingIndex = config.bookings.findIndex(b => b.targetDate === targetDate);
          if (existingIndex !== -1) {
            console.log('❌ Booking for ' + targetDate + ' already exists:');
            console.log('   Current: ' + config.bookings[existingIndex].start + '-' + config.bookings[existingIndex].end + ' (Resource ' + config.bookings[existingIndex].resource + ')');
            console.log('   New: ' + startTime + '-' + endTime + ' (Resource ' + resource + ')');
            console.log('🔄 Replacing existing booking');
            config.bookings.splice(existingIndex, 1);
          }
          
          // Create new booking
          const newBooking = {
            targetDate: targetDate,
            start: startTime,
            end: endTime,
            resource: resource
          };
          
          // Add and sort bookings by date
          config.bookings.push(newBooking);
          config.bookings.sort((a, b) => a.targetDate.localeCompare(b.targetDate));
          
          // Save configuration with nice formatting
          const yamlContent = YAML.stringify(config, {
            lineWidth: 0,
            minContentWidth: 0,
            quotingType: '"'
          });
          
          // Add header comment
          let headerComment = '# Library Booking Schedule\n';
          headerComment += '# Simple YAML configuration for automatic library bookings\n';
          headerComment += '#\n';
          headerComment += '# Each booking will execute 2 days before the target date at 18:01 Netherlands time\n';
          headerComment += '# Example: ' + targetDate + ' booking will execute on ' + process.env.BOOKING_DATE + ' at 18:01\n';
          headerComment += '\n';
          
          await fs.writeFile('bookings.yml', headerComment + yamlContent);
          
          console.log('✅ Successfully added booking for ' + targetDate);
          console.log('📋 Booking will execute on ' + process.env.BOOKING_DATE + ' at 18:01 Netherlands time');
          console.log('🎯 Total bookings in queue: ' + config.bookings.length);
        }
        
        addBooking().catch(error => {
          console.error('❌ Error: ' + error.message);
          process.exit(1);
        });
        EOF
        
        # Run the script
        TARGET_DATE="${{ github.event.inputs.target_date }}" \
        START_TIME="${{ github.event.inputs.start_time }}" \
        END_TIME="${{ github.event.inputs.end_time }}" \
        RESOURCE="${{ github.event.inputs.resource }}" \
        node add-booking-to-yaml.mjs
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add bookings.yml
        
        if git diff --staged --quiet; then
          echo "📭 No changes to commit"
        else
          git commit -m "📝 Add booking: ${{ github.event.inputs.target_date }} ${{ github.event.inputs.start_time }}-${{ github.event.inputs.end_time }}

          🎯 Target: ${{ github.event.inputs.target_date }}
          ⏰ Time: ${{ github.event.inputs.start_time }} - ${{ github.event.inputs.end_time }}
          🏢 Resource: ${{ github.event.inputs.resource }}
          📅 Will execute: $BOOKING_DATE at 18:01"
          
          git push
          echo "✅ Booking added and committed to repository"
        fi
        
    - name: Display booking schedule
      run: |
        echo "🎉 Booking successfully scheduled!"
        echo ""
        echo "📋 Current bookings.yml:"
        cat bookings.yml
        echo ""
        echo "🤖 The daily scheduler will automatically execute this booking at the optimal time!"